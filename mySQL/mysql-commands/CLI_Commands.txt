For seeing all databases
show databases;


Types for create Table
show create table products;


Select all the values of table
select * from products;
- select * from students where fname='ali' || fname='suhaib';
OR
With Where IN clause
- select * from students where fname in ('ali', 'suhaib');


Details of table
DESCRIBE users;
OR
desc users;


Add Column in Existing Table
ALTER TABLE products ADD COLUMN `image` VARCHAR(255) NOT NULL;


Update Specifc value of row in Table
UPDATE users SET ID=103 WHERE ID=3;
UPDATE users SET id=3 WHERE Name='Mary';



Delete Value from Table
DELETE FROM users WHERE Name='John';


Delete table
DROP TABLE users;


Delete Database
DROP DATABASE blog_app;


Edit existing row in Table
ALTER TABLE products CHANGE old_column_name new_column_name data type;
ALTER TABLE users CHANGE username name varchar(200);


Alter multiple columns
ALTER TABLE users 
  RENAME COLUMN username TO name,
  RENAME COLUMN id TO userId,
  RENAME COLUMN email TO userEmail;


OR
ALTER TABLE table_name 
  CHANGE old_column_name1 new_col_name1 Data Type,
  CHANGE old_column_name2 new_col_name2 Data Type,
  CHANGE old_column_name3 new_col_name3 Data Type;


Add new column in table
ALTER TABLE users
    -> ADD userId varchar(50) NOT NULL(data types)
    -> AFTER id;
if we didn't specify AFTEER it'lll automatically adds at END

EX ALTER TABLE products
    -> ADD test varchar(50) NOT NULL
    -> AFTER id;


for modifications
ALTER TABLE table_name
  MODIFY column_name column_definition
    FIRST  AFTER column_name,
  MODIFY column_name column_definition
    FIRST  AFTER column_name;
ALTER TABLE students MODIFY id VARCHAR(255) NOT NULL;
if we wanted to modify it from NULL to NOT NULL



ALTER TABLE products
    -> MODIFY test varchar(25) NULL;
now characters can be no more than 25 previouslt it was 50


Delete column in table
ALTER TABLE users
  DROP COLUMN id;


ALTER TABLE users
  CHANGE COLUMN id userId
    varchar(20) NOT NULL;
    

Create Table With CMD
- create table students ( name varchar(255), age int);
Create Table with multiple columns
- CREATE TABLE test (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, cname VARCHAR(255) NOT NULL, email VARCHAR(20));


Insert Value into column
- INSERT INTO user (id, name)  VALUES (1, "huzi")
- INSERT INTO students (id, name, class)  VALUES (1, "ali", 10)
- Make sure to cover the name with string property with commas like 'ali'
- insert into students (fname, lname, class) values ('ali', 'khan', 10), ('hassan', 'ali', 9), ('suhaib', 'hassan', 12);


show warnings;
to check all the warnings because in cmd we just see the word warning not the actual type of warning
show errors;


- NULL MEANS VALUE IS NOT KNOW
- NULL DOES NOT MEANS 0 RATHER IT MEANS VALUE IS NOT KNOWN


Primary Keys
- PRIMARY KEY UNIQUELY identifyes each record in a table
- PRIMARY KEY can't be null
- AUTO INCREMENT (allows to generate unique number automatically whenever a new record is inserted into a table)
- ALTER TABLE users MODIFY id INTEGER NOT NULL AUTO_INCREMENT; for already created column


WHERE clause      
- where caluse is used for filter
- select * from students where age=16;
- select fname, lname from students where lname='hassan';
- select id, fname, lname from students where lname='hassan'; 


UPDATE with where clause
- UPDATE students set class=10 where lname='hassan';
- UPDATE students set lname='hassan' where fname='bilal';


Adding set default in existing tables
- ALTER TABLE customers ALTER COLUMN email SET DEFAULT 'customer_email';


DELTING with where clause
- delete from students where fname='ali';
- delete from students where id=10;


NOW when we delete an row the id of next row doesn't change suppose we deleted student with name ali whose id is 2 and next student is suhaib whose id is 3 now if we delete the data of ali whose id is 2 then id  of suhaib will remains 3 it'll not changes into 2 because their is too many sensitive data linked with the id of each row like studenst marks, passwords therefore id never changes


Delete All the values inside the table But NOT the table
delete from students;


DISTINCT (selects specific value of table)
- select distinct column_name from table_name;
- select distinct username from users;
- select distinct id, username, email from users;


Order By
- SELECT id FROM users ORDER BY id;
- SELECT id FROM users ORDER BY id DESC;
- it'll shows us ascending order by default
- SELECT class FROM students ORDER BY class DESC;

USE DISTNICT
so we can make sure if their is any student in class for example if their is any student in class 10 this year or not
- SELECT distinct class FROM students ORDER BY class;
for unique clasees at every time means no more same values repetetion
- SELECT distinct class FROM students ORDER BY class DESC;


Order by alphabets
- SELECT distinct fname FROM students ORDER BY fname ASC;


LIMITS FOR LIMITED DATA
- SELECT fname FROM students ORDER BY fname limit 6;
if we select limit to 3 then we'll get only 3 students data


LIKE OPERATOR
Is just like i talked to someone yesterday but i didn't remember his name yeah but i remember that his name starts with something like (so) so in this type of conditons we uses LIKE OPERATORS because it can be sohaib, sohail as both starts from so
- SELECT username FROM users WHERE username LIKE '%so%';
inside percentage we uses the starting words we wanted to search about
- SELECT fname FROM students WHERE fname LIKE '%su%';


MYSQL AGGREGATE FUNCTIONS
- MAX() for maximum of any integer
example pick the studnets who is at highhest class or of maximum of age
- select max(row_name) from table_name;
- select max(class) from students;


FOR MINIMUM
- select min(class) from students;


FOR SUM
- select SUM(class) from students;
basically sum is used for if we are getting sum of all the scores from all subject like for highest score we use for lowest score we uses min for sum of all the scores of all subject we uses sum

NOW WE CAN USE SUM
here if someone oders multiple times
we can use this
- select sum(amount) from orders where cid=1;
cid is used for foreign key so we can get exact name of ours customer for amount of order he ordered and sum them


COUNT IS IMPORTANT FOR AVG like if we wanted to get score in PERCENTAGE like what is the percentage of all the subjects
COUNT is always applicable for id
COUNT is like .length gives the lenght of all the data
select COUNT(id) from users;


AVERAGE
- select avg(class) from students;


NOW FOR LOGICAL OPERATOR WE USES
- select * from students where class != 10;
so we can get data of all students whose class is NOT equals to 10
- select * from students where class >= 10;
- select * from students where class > 10;
- select * from students where class <= 10;
- select * from students where class < 10;
- select * from students where class <=10 || class >=15;

In between Result
- select * from students where class >= 12 && class <=16; 
- select * from students where class between 12 and 16
- select * from students where class != 12 && class != 16;


CONCAT
for adding two values
- select concat(fname,  ' ',  lname) from students as fullname;
- select concat('ali',  ' ',  'hassan') as fullname;
' ' used for spacing
- select concat(fname,  ' ',  lname) from students;
- select concat('huzi', reverse('huzi')) as palindrom;
palindrom are those which can be read same as forawrd and backward


for lengths of char
- select char_length ('huzi')
- select upper('huzi')
- select lower('huzi')


IF you are making app for hosptial we uses these data time datetime format for record
curdate(), curtime(), now();


FOREIGN KEY
foreign key use for linking two tables a foreign key is a field in one table that refers to the primary key of other tables
- ALTER TABLE table_name_where_you_wanted_foreign_key ADD CONSTRAINT foreign_key_name FOREIGN KEY (others_table_id_with_whom_you_wanted_it_to_linked_with) REFERENCES others_table_name_with_whom_you_wanted_it_to_linked_with((others_table_id_with_whom_you_wanted_it_to_linked_with);
- ALTER TABLE orders ADD CONSTRAINT foreign_key FOREIGN KEY (cid) REFERENCES customers(cid);
- after this in PRIMARY KEY of that table where we added forgein key there will be something wriiten as MUL
MUL MEANS MULTIPLE


INNER JOINS RETURNS matching values in both tables
now we've two tables one for customer and one for orders and we've added foreign key in orders table so we can join them and can gets the exact data like which cutomers order what
- select * from customers join orders on customers.cid = orders.cid;
because in orders we've foreign key called cid which is primary key of customers table
- select title from articles join users on articles.owner_id = users.id;
here in articles we've foreign key called owner_id which is primary key for users table
Using Join statement
- select username, title from articles join users on articles.owner_id = users.id;
if Wanted to select id from table as well then
- select users.id, username, title from articles join users on articles.owner_id = users.id;
select * from articles join favorite_articles on articles.id = favorite_articles.article_id && user_id = 2;


LEFT JOIN
- select * from customers left join orders on customers.cid = orders.cid;
BY THIS METHOD we can get all the data from left tables even if any customer didn't odered any thing then we WILL get NULL if customer didn't order any thing
if we din't use left join just uses join then we'll get data for all those cutomers who've placed order
and we can use right join for right tables data
select * from customers join orders on customers.cid = orders.cid; // this is used when we wanted to see the two tables side by side if foreign key is enable
select        *             from                table_name_where_primary_key join table_name_where_foreign_key    on       table_name_where_primary_key.cid         =                   table_name_where_foreign_key.cid;
ALTER TABLE reviews ADD COLUMN pid INT NOT NULL, ADD FOREIGN KEY foreign_key(pid) REFERENCES products(pid);
single line for adding column for foreign key and properties
FOR MODIFYING ID WE'VE TO SPECIFY ALL
ALTER TABLE testtable MODIFY id INT NOT NULL PRIMARY KEY AUTO_INCREMENT;3
IF WE WANTED TO DEL SOME REVIEWS which are same and too many times we can use
delete from reviews where description like '%excellent laptop%';


ON DELETE CASCADE
ON DELETE CASCADE ON DELETE UPDATE // it is necessary to do this while creating foreign key because cascade means 
if one main main columns delete then all the childs related to that column must also delete


join for checking relation bw two tables
select u.username as author, a.title as title, a.id as article from articles a join users u on a.ownerId = 1;